{
	"name": "OSDCloud PowerShell Development",
	"dockerComposeFile": "docker-compose.yml",
	"service": "osdcloudcustombuilder",
	"workspaceFolder": "/workspace",
	"customizations": {
		"vscode": {
			"extensions": [
				"ms-vscode.powershell",
				"streetsidesoftware.code-spell-checker",
				"GitHub.copilot",
				"esbenp.prettier-vscode",
				"DavidAnson.vscode-markdownlint",
				"redhat.vscode-yaml",
				"github.vscode-github-actions",
				"ms-azuretools.vscode-docker",
				"eamodio.gitlens"
			],
			"settings": {
				"terminal.integrated.defaultProfile.windows": "PowerShell",
				"terminal.integrated.profiles.windows": {
					"PowerShell": {
						"path": "pwsh",
						"args": []
					}
				},
				"powershell.powerShellDefaultVersion": "PowerShell",
				"powershell.scriptAnalysis.enable": true,
				"powershell.pester.useLegacyCodeLens": false,
				"powershell.integratedConsole.showOnStartup": true,
				"powershell.debugging.createTemporaryIntegratedConsole": true,
				"powershell.codeFormatting.autoCorrectAliases": true,
				"powershell.codeFormatting.useCorrectCasing": true,
				"powershell.codeFormatting.alignPropertyValuePairs": true,
				"powershell.enableProfileLoading": true,
				"editor.formatOnSave": true,
				"editor.formatOnPaste": true,
				"editor.bracketPairColorization.enabled": true,
				"editor.guides.bracketPairs": "active",
				"editor.renderWhitespace": "all",
				"files.eol": "\r\n",
				"files.trimTrailingWhitespace": true,
				"files.insertFinalNewline": true,
				"[powershell]": {
					"editor.formatOnSave": true,
					"editor.formatOnPaste": true,
					"files.encoding": "utf8",
					"editor.defaultFormatter": "ms-vscode.powershell"
				},
				"[markdown]": {
					"editor.formatOnSave": true,
					"editor.defaultFormatter": "DavidAnson.vscode-markdownlint"
				}
			}
		}
	},
	"initializeCommand": "powershell -Command \"if (-not (Get-Command -Name docker -ErrorAction SilentlyContinue)) { Write-Error 'Docker is not installed or not in PATH'; exit 1 } else { $dockerInfo = docker info; $isWindows = $dockerInfo | Select-String -Pattern 'OSType: windows' -Quiet; if (-not $isWindows) { Write-Error 'Docker is not configured for Windows containers. Please switch to Windows containers before continuing.' } }\"",
	"remoteUser": "ContainerAdministrator",
	"postCreateCommand": "pwsh -NoProfile -Command \"& {. C:/workspace/.devcontainer/container-init.ps1}\"",
	"forwardPorts": [],
	"shutdownAction": "stopCompose"
}
