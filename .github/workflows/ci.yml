name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup PowerShell
        uses: PowerShell/PowerShell@v1
        with:
          powershell-version: '7.5'

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module Pester -Force
          Install-Module InvokeBuild -Force
          Install-Module ModuleBuilder -Force
          Install-Module OSD -Force

      - name: Run Tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = "./tests"
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = "test-results.xml"
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.OutputPath = "coverage.xml"
          Invoke-Pester -Configuration $config

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup PowerShell
        uses: PowerShell/PowerShell@v1
        with:
          powershell-version: '7.5'

      - name: Build Module
        shell: pwsh
        run: ./build.ps1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: module-build
          path: out/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: module-build
          path: out/

      - name: Publish to PSGallery
        shell: pwsh
        env:
          PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
        run: |
          if ($env:PSGALLERY_API_KEY) {
            ./tools/Publish-Module.ps1
          } else {
            Write-Warning "No PSGallery API key found. Skipping publish."
          }
